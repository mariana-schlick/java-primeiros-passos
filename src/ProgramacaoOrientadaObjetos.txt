Classes
    São elementos fundamentais, que servem para modelar os objetos, a gente modela eles através de atributos e comportamentos,
    que são declarados através de métodos.

    Uma classe é um molde ou modelo para criar objetos. Ela define atributos (características) e métodos (comportamentos) que
    os objetos criados a partir dessa classe terão.

    Estrutura de uma classe em Java:
        public class Carro {
         // Atributos (propriedades ou características do objeto)
            String marca;
            String modelo;
            int ano;

        // Métodos (comportamentos ou ações do objeto)
            void acelerar() {
            System.out.println("O carro está acelerando!");
        }

            void frear() {
            System.out.println("O carro está freando!");
        }
    }

Objeto
    Um objeto é uma instância de uma classe. Em outras palavras, é um "exemplar" criado a partir da classe que tem valores específicos
    para seus atributos e pode executar os métodos definidos.

    Criando e usando um objeto:
        Para criar um objeto, usamos a palavra-chave new, que aloca memória para o objeto.
            public class Main {
                public static void main(String[] args) {
                    // Criando um objeto a partir da classe Carro
                    Carro meuCarro = new Carro();

                    // Definindo valores para os atributos
                    meuCarro.marca = "Toyota";
                    meuCarro.modelo = "Corolla";
                    meuCarro.ano = 2022;

                    // Usando os métodos do objeto
                    meuCarro.acelerar();
                    meuCarro.frear();

                    // Exibindo os valores dos atributos
                    System.out.println("Marca: " + meuCarro.marca);
                    System.out.println("Modelo: " + meuCarro.modelo);
                    System.out.println("Ano: " + meuCarro.ano);
                }
            }

Instância
    Instância é o termo usado para descrever um objeto específico criado a partir de uma classe em linguagens de programação
    orientadas a objetos, como Java.

    Em termos simples, quando você usa uma classe como um molde ou modelo para criar algo concreto no programa, o resultado é a
    instância daquela classe.

    Definição formal:
    Uma instância é a manifestação ou ocorrência real de uma classe na memória do programa, com atributos que podem conter valores
    específicos e métodos que podem ser executados.

Diferença entre Classe e Instância
    Classe - É o molde ou definição. Define atributos e métodos. Não ocupa espaço na memória.
    Instância - É o objeto concreto criado a partir da classe. Contém valores específicos nos atributos. Ocupa espaço na memória
    quando criada com new.

    Exemplo de analogia:
    Imagine que uma classe é uma planta arquitetônica de uma casa. Ela contém os detalhes sobre como construir a casa (como quartos,
    portas, janelas, etc.).
    Uma instância seria uma casa real construída usando aquela planta. Você pode construir várias casas (instâncias) com base na mesma
    planta, mas cada casa pode ter cores, móveis e tamanhos diferentes.

Construtores:
    Um construtor em Java é um tipo especial de método usado para inicializar objetos. Ele é chamado automaticamente quando um objeto
    é criado usando a palavra-chave new. O construtor é usado para atribuir valores iniciais aos atributos da classe ou para executar
    outras configurações necessárias.

        public class Carro {
            String marca;
            String modelo;

            // Construtor
            public Carro(String marca, String modelo) {
                this.marca = marca;
                this.modelo = modelo;
            }
        }

        public class Main {
            public static void main(String[] args) {
                Carro meuCarro = new Carro("Honda", "Civic");
                System.out.println(meuCarro.marca + " " + meuCarro.modelo);
            }
        }

Por que usar construtores?
    Para garantir que os objetos sejam criados em um estado válido.
    Para inicializar atributos da classe com valores específicos.
    Para simplificar o processo de configuração ao criar novos objetos.

Tipos de Construtores em Java:
    Construtor Padrão (Default Constructor):
    Se você não definir nenhum construtor na classe, o Java criará automaticamente um construtor padrão sem parâmetros.
    Ele inicializa os atributos com valores padrão (nulos, 0, false, etc.).
        public Carro (String marca){
            this.marca = marca;
        }

        class Preferida {
            void criarCarro(){
            Carro meuCarro = new Carro("Ferrari");
            }
        }

    Posso ter vários construtores. O cosntrutor também pode ser privado, ou seja, não é visível para todas as Classes.

    Construtor Parametrizado:
    Você pode criar construtores que aceitam parâmetros para inicializar os atributos da classe com valores específicos.
        public class Carro {
            String marca;
            String modelo;

            // Construtor parametrizado
            public Carro(String marca, String modelo) {
                this.marca = marca;
                this.modelo = modelo;
            }
        }

        public class Main {
            public static void main(String[] args) {
                Carro carro = new Carro("Toyota", "Corolla");
                System.out.println(carro.marca + " " + carro.modelo); // Toyota Corolla
            }
        }

    Construtores Sobrecarregados:
    Você pode criar vários construtores com diferentes números ou tipos de parâmetros, permitindo flexibilidade ao criar objetos.
        public class Carro {
            String marca;
            String modelo;

            // Construtor sem parâmetros
            public Carro() {
                this.marca = "Genérica";
                this.modelo = "Padrão";
            }

            // Construtor com parâmetros
            public Carro(String marca, String modelo) {
                this.marca = marca;
                this.modelo = modelo;
            }
        }

        public class Main {
            public static void main(String[] args) {
                Carro carro1 = new Carro(); // Usa o construtor sem parâmetros
                Carro carro2 = new Carro("Honda", "Civic"); // Usa o construtor com parâmetros

                System.out.println(carro1.marca + " " + carro1.modelo); // Genérica Padrão
                System.out.println(carro2.marca + " " + carro2.modelo); // Honda Civic
            }
        }

Uso do this no Construtor
    O this é usado dentro do construtor para se referir à instância atual da classe. Ele é útil para diferenciar entre os
    parâmetros do construtor e os atributos da classe quando eles têm o mesmo nome.
        public class Carro {
            String marca;
            String modelo;

            public Carro(String marca, String modelo) {
                this.marca = marca; // `this.marca` se refere ao atributo da classe
                this.modelo = modelo;
            }
        }

    Chamando outro construtor dentro do construtor (this()):
    Você pode usar this() para chamar outro construtor da mesma classe. Isso ajuda a evitar duplicação de código.
        public class Carro {
            String marca;
            String modelo;

            public Carro() {
                this("Genérica", "Padrão"); // Chama o construtor parametrizado
            }

            public Carro(String marca, String modelo) {
                this.marca = marca;
                this.modelo = modelo;
            }
        }

Modificadores de acesso
    É uma palavra que vai determinar o nível de visibilidade dos atributos (public, private).
    Public - Será visível por todas as outras classes que criarem uma instância da classe citada, podendo ser modificada por estas.
    Só pode ter UMA classe pública dentro de um arquivo Java e tem que ser a classe com o nome do arquivo.
    Private - As outras classes não consiguirão modificar, porém a classe em que está esse atributo, consegue modificar/visibilizar/chamar.
    Protected - As classes conseguem visualizar, porém, não consegue modificar.

Herança e Polimorfismo
    Classes podem herdar de outras classes e sobrescrever métodos para comportamentos diferentes. Isso amplia a reutilização e
    flexibilidade do código.
    Polimorfismo Ex: Todos o Ser possuem o método comer (herança), porém a forma de comer é diferente.
    No exemplo prático, o Cachorro e a Pessoa são Ser, mas cada um possuí seu método de saudação.

Compilar
    Abrir Terminal, entrar na pasta source = cd src
    Compilar arquivos java = javac Main.java

Rodar programa
    Abrir Terminal, entrar na pasta source = cd src
    Rodar arquivo Main = java Main